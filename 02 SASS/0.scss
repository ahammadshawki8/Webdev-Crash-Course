// SASS 
// - Syntactically Awesome Style Sheet
// - CSS Preprocessor / Extension
// - Provides features thatdon't exists in CSS (var, condition, func, etc.)
// - SASS (.scss) files are compiled into regular css

// We can use both .sass and .scss file extension
// .scss use curly braces like css where .sass use indentation like Python
// .scss is reommanded


// Varibles
// Start with $
// Though CSS now have variables (custom properties) using var() function,
// but SASS variables are easier to read.

$font-stack:  Helvetica, "sans serif";
$primary-color: rgb(30, 255, 0);

// We can use them anywhere in the file


// Nesting
// SASS also provide a readable way of nesting.
// For example if we want to change ul/li in nav,
// In CSS we need to use
// nav ul {
//     list-style: none;
// }
// nav li {
//     display: inline-block;
// }

// In SASS, we can do that by,
nav {
    ul {
        list-style: none;
    }

    li {
        display: inline-block;
    }
}


// Modules & Partials
// we can break up our sass into separate files
// and we can combining them in the main sass file
// In CSS we can create different files and import them into HTML,
// But it will create multiple HTTP request
// In SASS after impoting all the SASS files in the main SASS file,
// It will be compiled in one big CSS file.

// _base.scss
$font-stack:  Helvetica, sans-serif;
$primary-color: rgb(30, 255, 0);

body {
    font: 100% $font-stack;
    color: $primary-color;
}

// main.scss
@use 'base';    // Importing

.inverse {
    background-color: $primary-color;  // using 
    color: #fff;
}


// Mixins and Functions
// Mixin
@mixin transform($property) {    // defining the mixin, mixin name, param, body
    -webkit-transform: $property;
    -ms-transform: $property;
    transform: property;
}

.box {
    @include transform(rotate(30deg));  // Calling the mixin using @include
}

// Functions
// Difference between Mixin and Function is Function returns some value
// Also we don't need to use @include for calling the Functions


// Inheritance
// Inheritance and Extending is another awesome feature of SASS
// Often time we have similar kinds of elements which has different styles but the base style is same,
// In that case, without repreating the base style, we can use inheritance and extend.
%message-shared {
    border: 1px solid #ccc;
    padding: 10px;
    color: #fff;
}

.message {
    @extend %message-shared;
}

.success {
    @extend %message-shared;
    border-color: green;
}

.error {
    @extend %message-shared;
    border-color: red;
}


// Operators
// In CSS, if we need to do any mathmatical calculation, we have to use calc() function.
// In SASS, we can do that directly.
.container {
    width: 100%;
}

article[role="main"] {
    float: left;
    width: 600px / 960px * 100%;
}

article[role="aside"] {
    float: left;
    width: (960px - 600px) / 960px * 100%;
}


// Conditionals
@mixin triangle($size, $color, $direction) {
    height: 0;
    width: 0;

    border-color: transparent;
    border-style: solid;
    border-width: $size / 2 ;
    
    @if ( direction == up) { // if
        border-bottom-color: $color;
    }

    @else if (direction == down) {  // elif
        border-top-color: $color;
    }

    @else if (direction == left) {
        border-right-color: $color;
    }

    @else { //else
        @error "Unknown Direction #{$direction}."; // raising error and string interpolation
    }
}


// Ok now lets create a sample landing page with SCSS